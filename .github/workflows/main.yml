name: main
run-name: main-pipeline
on: [push]
jobs:
  run-unit-tests:
    runs-on: ubuntu-latest
    container:
      image: node:16
      env:
        NODE_ENV: development
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: install dependencies
        run: npm ci
      - name: run tests
        run: npm run test
  build-image:
    needs: run-unit-tests
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: build image
        run: docker build -t app:latest .
      - name: create a lovely package
        run: docker save app:latest | gzip > lovely_artifact.tar.gz
      - name: upload artefact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: lovely_artifact.tar.gz
  run-performance-tests:
    needs: build-image
    runs-on: ubuntu-latest
    steps:
      - name: download artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image
          path: .
      - name: unpack and load artefact to docker
        run: docker load -i ./lovely_artifact.tar.gz
      - name: run app
        run: docker run -d -p 8080:8080 app:latest
      - name: run performance tests
        run: ls
  deploy-to-stage:
    needs: run-performance-tests
    runs-on: ubuntu-latest
    environment:
      name: stage
    steps:
      - name: download artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image
          path: .
      - name: connect to stage
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host staging
            HostName $HOST
            User root
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
          END
        env:
          HOST: ${{ secrets.HOST }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
      - name: upload artefact
        run: scp -i ~/.ssh/staging.key -o 'StrictHostKeyChecking no' ./lovely_artifact.tar.gz root@$HOST:/root/lovely_artifact.tar.gz
        env:
          HOST: ${{ secrets.HOST }}
      - name: load docker on vps
        run: ssh staging docker load -i /root/lovely_artifact.tar.gz
      - name: run app
        run: ssh staging docker run -d -p 80:8080 app:latest
        
  deploy-to-prod:
    needs: deploy-to-stage
    runs-on: ubuntu-latest
    environment:
      name: prod
    steps:
      - name: download artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image
          path: .
      - name: deploy to stage
        run: echo "deploying to prod"
        
        
        
        
        
